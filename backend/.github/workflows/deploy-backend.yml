name: 🚀 Deploy MATC Backend to Render

on:
  push:
    branches:
      - main
      - production
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

jobs:
  deploy-backend:
    name: 🔧 Deploy Backend
    runs-on: ubuntu-latest
    
    environment:
      name: production
      url: https://matc-backend.onrender.com
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: |
          npm ci --only=production
          npm audit --audit-level=high

      - name: 🧪 Run Tests
        run: |
          npm test
        env:
          NODE_ENV: test
          MONGODB_URI: ${{ secrets.MONGODB_URI_TEST }}

      - name: 🏗️ Build Application
        run: |
          npm run build
        env:
          NODE_ENV: production

      - name: 🔍 Validate Environment Variables
        run: |
          echo "Validating required environment variables..."
          if [ -z "${{ secrets.MONGODB_URI }}" ]; then
            echo "❌ MONGODB_URI is not set"
            exit 1
          fi
          if [ -z "${{ secrets.JWT_SECRET }}" ]; then
            echo "❌ JWT_SECRET is not set"
            exit 1
          fi
          echo "✅ All required environment variables are set"

      - name: 🚀 Deploy to Render
        run: |
          echo "Triggering Render deployment..."
          curl -X POST \
            -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
            -H "Content-Type: application/json" \
            "https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}/deploys" \
            -d '{"clearCache": true}'
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}

      - name: ⏳ Wait for Deployment
        run: |
          echo "Waiting for deployment to complete..."
          sleep 60
          
          # Check deployment status
          for i in {1..10}; do
            echo "Checking deployment status (attempt $i/10)..."
            
            response=$(curl -s -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
              "https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}")
            
            status=$(echo $response | jq -r '.status')
            
            if [ "$status" = "live" ]; then
              echo "✅ Deployment successful!"
              break
            elif [ "$status" = "build_failed" ] || [ "$status" = "deploy_failed" ]; then
              echo "❌ Deployment failed with status: $status"
              exit 1
            else
              echo "⏳ Deployment in progress (status: $status)..."
              sleep 30
            fi
            
            if [ $i -eq 10 ]; then
              echo "❌ Deployment timeout"
              exit 1
            fi
          done

      - name: 🧪 Health Check
        run: |
          echo "Running health check..."
          
          # Wait a bit more for the service to be fully ready
          sleep 30
          
          # Health check with retry
          for i in {1..5}; do
            echo "Health check attempt $i/5..."
            
            if curl -f -s "https://matc-backend.onrender.com/api/health"; then
              echo "✅ Backend health check passed!"
              break
            else
              echo "⏳ Health check failed, retrying in 15 seconds..."
              sleep 15
            fi
            
            if [ $i -eq 5 ]; then
              echo "❌ Health check failed after 5 attempts"
              exit 1
            fi
          done

      - name: 📊 Deployment Summary
        run: |
          echo "## 🎉 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ✅ Success" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: Production" >> $GITHUB_STEP_SUMMARY
          echo "- **Backend URL**: https://matc-backend.onrender.com" >> $GITHUB_STEP_SUMMARY
          echo "- **API Health**: ✅ Healthy" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployment Time**: $(date)" >> $GITHUB_STEP_SUMMARY

  notify:
    name: 📢 Notify Deployment Status
    runs-on: ubuntu-latest
    needs: deploy-backend
    if: always()
    
    steps:
      - name: 📢 Deployment Notification
        run: |
          if [ "${{ needs.deploy-backend.result }}" = "success" ]; then
            echo "✅ MATC Backend deployment successful!"
            echo "🔗 Backend URL: https://matc-backend.onrender.com"
            echo "🧪 API Health: Verified"
          else
            echo "❌ MATC Backend deployment failed!"
            echo "Please check the deployment logs for details."
          fi
