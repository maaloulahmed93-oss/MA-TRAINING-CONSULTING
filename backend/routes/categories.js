import express from 'express';
import Category from '../models/Category.js';

const router = express.Router();

// GET /api/categories - Get all categories
router.get('/', async (req, res) => {
  try {
    console.log('üì• GET /api/categories - Requ√™te re√ßue');
    
    const { search, activeOnly } = req.query;
    
    let query = {};
    
    // Filter by active status
    if (activeOnly === 'true') {
      query.isActive = true;
    }
    
    // Search functionality
    if (search) {
      query.$text = { $search: search };
    }
    
    console.log('üîç Query MongoDB:', query);
    const categories = await Category.find(query).sort({ name: 1 });
    console.log('üìä Cat√©gories trouv√©es:', categories.length);
    
    // Log each category for debugging
    categories.forEach((category, index) => {
      console.log(`üìã Cat√©gorie ${index + 1}: ${category.name}`);
    });
    
    res.json({
      success: true,
      data: categories,
      count: categories.length
    });
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration des cat√©gories:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la r√©cup√©ration des cat√©gories',
      error: error.message
    });
  }
});

// POST /api/categories - Create a new category
router.post('/', async (req, res) => {
  try {
    console.log('üìù POST /api/categories - Donn√©es re√ßues:');
    console.log('üì¶ req.body:', JSON.stringify(req.body, null, 2));
    
    const { name, description } = req.body;
    
    // Basic validation
    if (!name || name.trim().length === 0) {
      return res.status(400).json({
        success: false,
        message: 'Le nom de la cat√©gorie est requis'
      });
    }
    
    // Check if category already exists
    const existingCategory = await Category.findOne({ 
      name: { $regex: new RegExp(`^${name.trim()}$`, 'i') } 
    });
    
    if (existingCategory) {
      return res.status(400).json({
        success: false,
        message: 'Une cat√©gorie avec ce nom existe d√©j√†'
      });
    }
    
    // Create new category
    const newCategory = new Category({
      name: name.trim(),
      description: description?.trim() || ''
    });
    
    const savedCategory = await newCategory.save();
    console.log('‚úÖ Nouvelle cat√©gorie cr√©√©e:', savedCategory.name);
    
    res.status(201).json({
      success: true,
      message: 'Cat√©gorie cr√©√©e avec succ√®s',
      data: savedCategory
    });
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la cr√©ation de la cat√©gorie:', error);
    
    if (error.code === 11000) {
      return res.status(400).json({
        success: false,
        message: 'Une cat√©gorie avec ce nom existe d√©j√†'
      });
    }
    
    if (error.name === 'ValidationError') {
      const messages = Object.values(error.errors).map(err => err.message);
      return res.status(400).json({
        success: false,
        message: 'Donn√©es invalides',
        errors: messages
      });
    }
    
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la cr√©ation de la cat√©gorie',
      error: error.message
    });
  }
});

// PUT /api/categories/:id - Update a category
router.put('/:id', async (req, res) => {
  try {
    console.log('üìù PUT /api/categories/:id - Donn√©es re√ßues:');
    console.log('üì¶ req.body:', JSON.stringify(req.body, null, 2));
    
    const { id } = req.params;
    const { name, description, isActive } = req.body;
    
    // Basic validation
    if (!name || name.trim().length === 0) {
      return res.status(400).json({
        success: false,
        message: 'Le nom de la cat√©gorie est requis'
      });
    }
    
    // Check if another category with same name exists
    const existingCategory = await Category.findOne({ 
      name: { $regex: new RegExp(`^${name.trim()}$`, 'i') },
      _id: { $ne: id }
    });
    
    if (existingCategory) {
      return res.status(400).json({
        success: false,
        message: 'Une cat√©gorie avec ce nom existe d√©j√†'
      });
    }
    
    const updatedCategory = await Category.findByIdAndUpdate(
      id,
      {
        name: name.trim(),
        description: description?.trim() || '',
        isActive: isActive !== undefined ? isActive : true,
        updatedAt: Date.now()
      },
      { new: true, runValidators: true }
    );
    
    if (!updatedCategory) {
      return res.status(404).json({
        success: false,
        message: 'Cat√©gorie non trouv√©e'
      });
    }
    
    console.log('‚úÖ Cat√©gorie mise √† jour:', updatedCategory.name);
    
    res.json({
      success: true,
      message: 'Cat√©gorie mise √† jour avec succ√®s',
      data: updatedCategory
    });
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la mise √† jour de la cat√©gorie:', error);
    
    if (error.name === 'ValidationError') {
      const messages = Object.values(error.errors).map(err => err.message);
      return res.status(400).json({
        success: false,
        message: 'Donn√©es invalides',
        errors: messages
      });
    }
    
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la mise √† jour de la cat√©gorie',
      error: error.message
    });
  }
});

// DELETE /api/categories/:id - Delete a category
router.delete('/:id', async (req, res) => {
  try {
    console.log('üóëÔ∏è DELETE /api/categories/:id - ID:', req.params.id);
    
    const { id } = req.params;
    
    const deletedCategory = await Category.findByIdAndDelete(id);
    
    if (!deletedCategory) {
      return res.status(404).json({
        success: false,
        message: 'Cat√©gorie non trouv√©e'
      });
    }
    
    console.log('‚úÖ Cat√©gorie supprim√©e:', deletedCategory.name);
    
    res.json({
      success: true,
      message: 'Cat√©gorie supprim√©e avec succ√®s',
      data: deletedCategory
    });
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la suppression de la cat√©gorie:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur lors de la suppression de la cat√©gorie',
      error: error.message
    });
  }
});

export default router;
