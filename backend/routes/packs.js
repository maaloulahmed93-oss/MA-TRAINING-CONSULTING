import express from 'express';
import Pack from '../models/Pack.js';
import { validatePackCreation, validatePackUpdate } from '../middleware/packValidation.js';

const router = express.Router();

// GET /api/packs - R√©cup√©rer tous les packs
router.get('/', async (req, res) => {
  console.log('üì¶ GET /api/packs - R√©cup√©ration des packs');
  try {
    const packs = await Pack.find({ isActive: true }).sort({ createdAt: -1 });
    console.log(`‚úÖ ${packs.length} packs trouv√©s`);
    
    res.json({
      success: true,
      data: packs,
      message: 'Packs r√©cup√©r√©s avec succ√®s'
    });
  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration des packs:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur serveur lors de la r√©cup√©ration des packs',
      error: error.message
    });
  }
});

// GET /api/packs/:id - R√©cup√©rer un pack sp√©cifique
router.get('/:id', async (req, res) => {
  console.log(`üì¶ GET /api/packs/${req.params.id}`);
  try {
    const pack = await Pack.findOne({ 
      $or: [
        { _id: req.params.id },
        { packId: req.params.id }
      ],
      isActive: true 
    });

    if (!pack) {
      console.log('‚ùå Pack non trouv√©');
      return res.status(404).json({
        success: false,
        message: 'Pack non trouv√©'
      });
    }

    console.log('‚úÖ Pack trouv√©:', pack.name);
    res.json({
      success: true,
      data: pack,
      message: 'Pack r√©cup√©r√© avec succ√®s'
    });
  } catch (error) {
    console.error('‚ùå Erreur lors de la r√©cup√©ration du pack:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur serveur lors de la r√©cup√©ration du pack',
      error: error.message
    });
  }
});

// POST /api/packs - Cr√©er un nouveau pack
router.post('/', validatePackCreation, async (req, res) => {
  console.log('üì¶ POST /api/packs - Cr√©ation d\'un nouveau pack');
  console.log('üìÑ Donn√©es re√ßues:', JSON.stringify(req.body, null, 2));

  try {
    // G√©n√©rer un packId unique si non fourni
    if (!req.body.packId) {
      req.body.packId = `pack-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
    }

    const pack = new Pack(req.body);
    const savedPack = await pack.save();
    
    console.log('‚úÖ Pack cr√©√© avec succ√®s:', savedPack.name);
    console.log('üÜî ID du pack:', savedPack._id);

    res.status(201).json({
      success: true,
      data: savedPack,
      message: 'Pack cr√©√© avec succ√®s'
    });
  } catch (error) {
    console.error('‚ùå Erreur lors de la cr√©ation du pack:', error);
    
    if (error.code === 11000) {
      return res.status(400).json({
        success: false,
        message: 'Un pack avec cet ID existe d√©j√†',
        error: 'Duplicate packId'
      });
    }

    res.status(400).json({
      success: false,
      message: 'Erreur lors de la cr√©ation du pack',
      error: error.message
    });
  }
});

// PUT /api/packs/:id - Mettre √† jour un pack
router.put('/:id', validatePackUpdate, async (req, res) => {
  console.log(`üì¶ PUT /api/packs/${req.params.id} - Mise √† jour du pack`);
  console.log('üìÑ Donn√©es de mise √† jour:', JSON.stringify(req.body, null, 2));

  try {
    const pack = await Pack.findOneAndUpdate(
      { 
        $or: [
          { _id: req.params.id },
          { packId: req.params.id }
        ],
        isActive: true 
      },
      req.body,
      { 
        new: true, 
        runValidators: true 
      }
    );

    if (!pack) {
      console.log('‚ùå Pack non trouv√© pour mise √† jour');
      return res.status(404).json({
        success: false,
        message: 'Pack non trouv√©'
      });
    }

    console.log('‚úÖ Pack mis √† jour avec succ√®s:', pack.name);
    res.json({
      success: true,
      data: pack,
      message: 'Pack mis √† jour avec succ√®s'
    });
  } catch (error) {
    console.error('‚ùå Erreur lors de la mise √† jour du pack:', error);
    res.status(400).json({
      success: false,
      message: 'Erreur lors de la mise √† jour du pack',
      error: error.message
    });
  }
});

// DELETE /api/packs/:id - Supprimer un pack (soft delete)
router.delete('/:id', async (req, res) => {
  console.log(`üì¶ DELETE /api/packs/${req.params.id} - Suppression du pack`);

  try {
    const pack = await Pack.findOneAndUpdate(
      { 
        $or: [
          { _id: req.params.id },
          { packId: req.params.id }
        ],
        isActive: true 
      },
      { isActive: false },
      { new: true }
    );

    if (!pack) {
      console.log('‚ùå Pack non trouv√© pour suppression');
      return res.status(404).json({
        success: false,
        message: 'Pack non trouv√©'
      });
    }

    console.log('‚úÖ Pack supprim√© avec succ√®s:', pack.name);
    res.json({
      success: true,
      message: 'Pack supprim√© avec succ√®s'
    });
  } catch (error) {
    console.error('‚ùå Erreur lors de la suppression du pack:', error);
    res.status(500).json({
      success: false,
      message: 'Erreur serveur lors de la suppression du pack',
      error: error.message
    });
  }
});

export default router;
