import mongoose from 'mongoose';
import Partner from './models/Partner.js';

// Configuration de la base de donn√©es
const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/matc-training';

async function fixParticipant177037() {
    try {
        console.log('üîÑ Connexion √† MongoDB...');
        await mongoose.connect(MONGODB_URI);
        console.log('‚úÖ Connect√© √† MongoDB');

        const participantId = 'PART-177037';
        
        console.log(`\nüîç Recherche du participant ${participantId}...`);
        
        // Chercher le participant
        let participant = await Partner.findOne({ partnerId: participantId });
        
        if (participant) {
            console.log('‚úÖ Participant trouv√© dans la base de donn√©es');
            console.log('üìä Donn√©es actuelles:');
            console.log(`   - Partner ID: ${participant.partnerId}`);
            console.log(`   - Nom: ${participant.fullName}`);
            console.log(`   - Email: ${participant.email}`);
            console.log(`   - Type: ${participant.type}`);
            console.log(`   - Actif: ${participant.isActive}`);
            console.log(`   - Description: ${participant.description}`);
            
            // V√©rifier et corriger les probl√®mes
            let needsUpdate = false;
            const updates = {};
            
            if (participant.type !== 'participant') {
                console.log(`‚ö†Ô∏è  Correction du type: "${participant.type}" ‚Üí "participant"`);
                updates.type = 'participant';
                needsUpdate = true;
            }
            
            if (!participant.isActive) {
                console.log(`‚ö†Ô∏è  Activation du participant: false ‚Üí true`);
                updates.isActive = true;
                needsUpdate = true;
            }
            
            if (!participant.fullName || participant.fullName.trim() === '') {
                console.log(`‚ö†Ô∏è  Ajout du nom: "${participant.fullName}" ‚Üí "Ahmed"`);
                updates.fullName = 'Ahmed';
                needsUpdate = true;
            }
            
            if (!participant.email || participant.email.trim() === '') {
                console.log(`‚ö†Ô∏è  Ajout de l'email: "${participant.email}" ‚Üí "aj@hotmail.com"`);
                updates.email = 'aj@hotmail.com';
                needsUpdate = true;
            }
            
            // V√©rifier/corriger la description
            let description = {};
            try {
                description = JSON.parse(participant.description || '{}');
            } catch (e) {
                console.log('‚ö†Ô∏è  Description JSON invalide, cr√©ation d\'une nouvelle');
                description = {};
                needsUpdate = true;
            }
            
            if (!description.firstName) {
                description.firstName = 'Ahmed';
                needsUpdate = true;
            }
            if (!description.status) {
                description.status = 'active';
                needsUpdate = true;
            }
            if (!description.enrollmentDate) {
                description.enrollmentDate = new Date().toISOString();
                needsUpdate = true;
            }
            if (!description.lastActivity) {
                description.lastActivity = new Date().toISOString();
                needsUpdate = true;
            }
            if (description.totalProgress === undefined) {
                description.totalProgress = 0;
                needsUpdate = true;
            }
            
            if (needsUpdate) {
                updates.description = JSON.stringify(description);
                updates.updatedAt = new Date();
                
                console.log('\nüîß Application des corrections...');
                await Partner.updateOne({ partnerId: participantId }, updates);
                console.log('‚úÖ Participant corrig√© avec succ√®s!');
            } else {
                console.log('‚úÖ Aucune correction n√©cessaire');
            }
            
        } else {
            console.log('‚ùå Participant non trouv√©, cr√©ation d\'un nouveau...');
            
            // Cr√©er un nouveau participant
            const newParticipant = new Partner({
                partnerId: participantId,
                fullName: 'Ahmed',
                email: 'aj@hotmail.com',
                phone: '+216 20 123 456',
                address: 'Tunis, Tunisie',
                type: 'participant',
                isActive: true,
                description: JSON.stringify({
                    firstName: 'Ahmed',
                    lastName: '',
                    avatar: '',
                    status: 'active',
                    notes: 'Participant cr√©√© automatiquement',
                    totalProgress: 0,
                    enrollmentDate: new Date().toISOString(),
                    lastActivity: new Date().toISOString()
                })
            });
            
            await newParticipant.save();
            console.log('‚úÖ Nouveau participant cr√©√© avec succ√®s!');
        }
        
        // V√©rification finale
        console.log('\nüß™ V√©rification finale...');
        const finalParticipant = await Partner.findOne({ 
            partnerId: participantId, 
            type: 'participant', 
            isActive: true 
        });
        
        if (finalParticipant) {
            console.log('üéâ SUCC√àS! Le participant est maintenant accessible via l\'API');
            console.log('üìä Donn√©es finales:');
            console.log(`   - Partner ID: ${finalParticipant.partnerId}`);
            console.log(`   - Nom: ${finalParticipant.fullName}`);
            console.log(`   - Email: ${finalParticipant.email}`);
            console.log(`   - Type: ${finalParticipant.type}`);
            console.log(`   - Actif: ${finalParticipant.isActive}`);
            
            const additionalData = JSON.parse(finalParticipant.description || '{}');
            console.log('   - Donn√©es additionnelles:');
            console.log(`     ‚Ä¢ Pr√©nom: ${additionalData.firstName}`);
            console.log(`     ‚Ä¢ Statut: ${additionalData.status}`);
            console.log(`     ‚Ä¢ Progr√®s: ${additionalData.totalProgress}%`);
            console.log(`     ‚Ä¢ Inscription: ${additionalData.enrollmentDate}`);
        } else {
            console.log('‚ùå √âCHEC! Le participant n\'est toujours pas accessible');
        }
        
    } catch (error) {
        console.error('‚ùå Erreur:', error);
    } finally {
        await mongoose.disconnect();
        console.log('\nüîå D√©connect√© de MongoDB');
    }
}

// Ex√©cuter le script
console.log('üîß Script de r√©paration PART-177037');
console.log('=====================================');
fixParticipant177037();
