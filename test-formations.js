// Script de test pour v√©rifier les formations co-anim√©es
// √Ä ex√©cuter dans la console du navigateur

console.log('=== Test des Formations Co-anim√©es ===');

// Simuler l'import du service (dans un environnement de navigateur)
// Vous pouvez copier-coller ce code dans la console du navigateur

// Test 1: V√©rifier si les donn√©es sont dans localStorage
const stored = localStorage.getItem('formationsCoAnimees');
if (stored) {
  console.log('‚úÖ Donn√©es trouv√©es dans localStorage');
  const formations = JSON.parse(stored);
  console.log('üìä Nombre de formations:', formations.length);
  formations.forEach((formation, index) => {
    console.log(`${index + 1}. ${formation.title}`);
    console.log(`   - Date: ${formation.date}`);
    console.log(`   - Formateurs: ${formation.trainers.join(', ')}`);
    console.log(`   - Participants: ${formation.participants.length}`);
    console.log(`   - Ressources: ${formation.resources.length}`);
    console.log(`   - Feedbacks: ${formation.feedbacks.length}`);
    console.log(`   - Certificat: ${formation.certificateAvailable ? 'Oui' : 'Non'}`);
    console.log('');
  });
} else {
  console.log('‚ùå Aucune donn√©e trouv√©e dans localStorage');
  console.log('üí° Naviguez vers /partenaire/formations-co-animees pour initialiser les donn√©es');
}

// Test 2: V√©rifier les routes
console.log('üîó Routes √† tester:');
console.log('1. /espace-partenariat (page principale)');
console.log('2. /partenaire/formations-co-animees (liste des formations)');
console.log('3. Cliquer sur une formation pour voir les d√©tails');

// Test 3: Donn√©es mock attendues
console.log('üìã Donn√©es mock attendues:');
console.log('- Formation Agile & Scrum (avec participants et ressources)');
console.log('- Formation UX Design (vide, pour tester les cas sans donn√©es)');

console.log('=== Fin du test ===');
