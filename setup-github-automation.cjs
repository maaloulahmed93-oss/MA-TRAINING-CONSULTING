#!/usr/bin/env node

/**
 * MATC GitHub Automation Setup Script
 * Automates GitHub repository setup, secrets configuration, and deployment pipeline
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

// Configuration
const CONFIG = {
  repository: {
    owner: 'maaloulahmed93-oss',
    name: 'matc-fullstack',
    url: 'https://github.com/maaloulahmed93-oss/matc-fullstack',
    branch: 'main'
  },
  secrets: {
    // Backend secrets
    MONGODB_URI: 'mongodb+srv://matc:matc44172284@matc.so6zd1x.mongodb.net/matc_db',
    NODE_ENV: 'production',
    PORT: '10000',
    FRONTEND_URLS: 'https://matrainingconsulting.vercel.app,https://admine-lake.vercel.app',
    JWT_SECRET: 'matc_secret_2025',
    
    // Frontend secrets
    VITE_API_BASE_URL: 'https://matc-backend.onrender.com/api',
    VITE_APP_NAME: 'MA-TRAINING-CONSULTING'
  }
};

// Colors for console output
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m'
};

function log(message, color = colors.reset) {
  console.log(`${color}${message}${colors.reset}`);
}

function success(message) {
  log(`‚úÖ ${message}`, colors.green);
}

function error(message) {
  log(`‚ùå ${message}`, colors.red);
}

function warning(message) {
  log(`‚ö†Ô∏è  ${message}`, colors.yellow);
}

function info(message) {
  log(`‚ÑπÔ∏è  ${message}`, colors.blue);
}

function header(message) {
  log(`\n${'='.repeat(60)}`, colors.cyan);
  log(`üöÄ ${message}`, colors.cyan);
  log(`${'='.repeat(60)}`, colors.cyan);
}

// Execute command with error handling
function runCommand(command, options = {}) {
  try {
    const result = execSync(command, {
      cwd: options.cwd || process.cwd(),
      encoding: 'utf8',
      stdio: options.silent ? 'pipe' : 'inherit'
    });
    return { success: true, output: result };
  } catch (error) {
    return { 
      success: false, 
      error: error.message,
      output: error.stdout || error.stderr || ''
    };
  }
}

// Commit and push all changes
function commitAndPush() {
  header('Committing and Pushing Changes');
  
  // Add all files
  info('Adding all files to Git...');
  const addResult = runCommand('git add .');
  if (!addResult.success) {
    error('Failed to add files to Git');
    return false;
  }
  success('All files added to Git');
  
  // Check if there are changes to commit
  const statusResult = runCommand('git status --porcelain', { silent: true });
  if (!statusResult.output.trim()) {
    info('No changes to commit');
    return true;
  }
  
  // Commit changes
  const commitMessage = `üöÄ Complete MATC fullstack deployment automation setup

- Added comprehensive GitHub Actions workflow
- Configured environment variables and secrets
- Set up automated CI/CD pipeline for Render + Vercel
- Added deployment validation and monitoring
- Created setup and validation scripts

Components:
- Backend API (Node.js + Express + MongoDB)
- Frontend Website (Vite + React)
- Admin Panel (Vite + React + TypeScript)

Deployment targets:
- Backend: Render.com
- Frontend: Vercel
- Admin Panel: Vercel

Generated by MATC Deployment Automation Script`;

  info('Committing changes...');
  const commitResult = runCommand(`git commit -m "${commitMessage}"`);
  if (!commitResult.success) {
    error('Failed to commit changes');
    return false;
  }
  success('Changes committed successfully');
  
  // Push to GitHub
  info('Pushing to GitHub...');
  const pushResult = runCommand(`git push origin ${CONFIG.repository.branch}`);
  if (!pushResult.success) {
    warning('Push may have failed - checking current remote...');
    const remoteResult = runCommand('git remote -v', { silent: true });
    if (remoteResult.success) {
      info('Current remotes:');
      console.log(remoteResult.output);
    }
    return false;
  }
  success('Changes pushed to GitHub successfully');
  
  return true;
}

// Generate GitHub Secrets setup instructions
function generateSecretsInstructions() {
  header('GitHub Secrets Configuration');
  
  const secretsInstructions = `# üîê GitHub Secrets Configuration Instructions

## üìã Required Secrets

To complete the deployment automation, you need to add the following secrets to your GitHub repository:

### üîó Repository URL
${CONFIG.repository.url}/settings/secrets/actions

### üìù Secrets to Add

Click "New repository secret" for each of the following:

#### **Backend & Environment Secrets:**
\`\`\`
Name: MONGODB_URI
Value: ${CONFIG.secrets.MONGODB_URI}

Name: NODE_ENV
Value: ${CONFIG.secrets.NODE_ENV}

Name: PORT
Value: ${CONFIG.secrets.PORT}

Name: FRONTEND_URLS
Value: ${CONFIG.secrets.FRONTEND_URLS}

Name: JWT_SECRET
Value: ${CONFIG.secrets.JWT_SECRET}

Name: VITE_API_BASE_URL
Value: ${CONFIG.secrets.VITE_API_BASE_URL}

Name: VITE_APP_NAME
Value: ${CONFIG.secrets.VITE_APP_NAME}
\`\`\`

#### **Deployment Secrets (Get from respective platforms):**
\`\`\`
Name: VERCEL_TOKEN
Value: [Get from Vercel Dashboard ‚Üí Settings ‚Üí Tokens]

Name: RENDER_API_KEY
Value: [Get from Render Dashboard ‚Üí Account Settings ‚Üí API Keys]

Name: RENDER_SERVICE_ID
Value: [Get from Render service URL: srv-XXXXXXXXX]

Name: VERCEL_ORG_ID
Value: [Get from Vercel Dashboard ‚Üí Settings ‚Üí General]

Name: VERCEL_PROJECT_ID
Value: [Get from Vercel Project ‚Üí Settings ‚Üí General]

Name: VERCEL_ADMIN_PROJECT_ID
Value: [Get from Admin Panel Vercel Project ‚Üí Settings]
\`\`\`

## üöÄ After Adding Secrets

1. Go to the Actions tab in your GitHub repository
2. You should see the "Deploy MATC Fullstack" workflow
3. Click "Run workflow" to test the deployment
4. Or push a new commit to trigger automatic deployment

## üîó Quick Links

- **Repository:** ${CONFIG.repository.url}
- **Actions:** ${CONFIG.repository.url}/actions
- **Secrets:** ${CONFIG.repository.url}/settings/secrets/actions

## ‚úÖ Verification

After adding all secrets, the deployment should work automatically when you push code to the main branch.
`;

  const instructionsPath = 'GITHUB_SECRETS_INSTRUCTIONS.md';
  fs.writeFileSync(instructionsPath, secretsInstructions);
  success(`GitHub Secrets instructions saved to: ${instructionsPath}`);
}

// Main setup function
async function main() {
  const startTime = Date.now();
  
  header('MATC GitHub Automation Setup');
  
  info('üéØ Setting up complete GitHub automation for MATC fullstack project');
  info(`üìÅ Working directory: ${process.cwd()}`);
  info(`üîó Target repository: ${CONFIG.repository.url}`);
  
  try {
    // Commit and push changes
    const pushSuccess = commitAndPush();
    
    // Generate secrets instructions
    generateSecretsInstructions();
    
    // Final summary
    const duration = Math.round((Date.now() - startTime) / 1000);
    
    header('Setup Complete');
    
    if (pushSuccess) {
      success('üéâ MATC GitHub automation setup completed successfully!');
      success(`‚è±Ô∏è  Setup time: ${duration} seconds`);
      success(`üîó Repository: ${CONFIG.repository.url}`);
      success('‚úÖ All code committed and pushed to GitHub');
      success('‚úÖ GitHub Actions workflow configured');
      success('‚úÖ Deployment pipeline ready');
    } else {
      warning('‚ö†Ô∏è  Setup completed with warnings');
      warning('Code may not have been pushed to GitHub');
      warning('Please check the repository exists and you have push access');
    }
    
    info('\nüìã Next Steps:');
    info('1. Ensure the GitHub repository exists and is accessible');
    info('2. Add the required secrets using GITHUB_SECRETS_INSTRUCTIONS.md');
    info('3. Test the deployment by pushing code or running the workflow');
    info('4. Monitor the deployment in the GitHub Actions tab');
    
    info('\nüîó Quick Links:');
    info(`Repository: ${CONFIG.repository.url}`);
    info(`Actions: ${CONFIG.repository.url}/actions`);
    info(`Secrets: ${CONFIG.repository.url}/settings/secrets/actions`);
    
  } catch (error) {
    error(`Setup failed: ${error.message}`);
    process.exit(1);
  }
}

// Handle command line execution
if (require.main === module) {
  main().catch(console.error);
}

module.exports = {
  main,
  CONFIG
};
