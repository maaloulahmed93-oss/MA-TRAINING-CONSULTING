# IDE Note: Warnings about ${{ secrets.* }} context access are false positives
# This is the official GitHub Actions syntax and will work correctly at runtime
name: 🚀 MATC Full-Stack Deployment Orchestration

on:
  workflow_dispatch:
    inputs:
      deploy_backend:
        description: 'Deploy Backend'
        required: true
        default: true
        type: boolean
      deploy_frontend:
        description: 'Deploy Frontend'
        required: true
        default: true
        type: boolean
      deploy_admin:
        description: 'Deploy Admin Panel'
        required: true
        default: true
        type: boolean
      environment:
        description: 'Deployment Environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
  push:
    branches:
      - main
    paths:
      - 'backend/**'
      - 'src/**'
      - 'admin-panel/**'

jobs:
  pre-deployment-checks:
    name: 🔍 Pre-Deployment Validation
    runs-on: ubuntu-latest
    
    outputs:
      backend-changed: ${{ steps.changes.outputs.backend }}
      frontend-changed: ${{ steps.changes.outputs.frontend }}
      admin-changed: ${{ steps.changes.outputs.admin }}
      
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 Detect Changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            backend:
              - 'backend/**'
            frontend:
              - 'src/**'
              - 'public/**'
              - 'index.html'
              - 'vite.config.*'
              - 'package.json'
            admin:
              - 'admin-panel/**'

      - name: 🧪 Environment Variables Check
        run: |
          echo "Checking required secrets..."
          
          # Backend secrets
          if [ -z "${{ secrets.MONGODB_URI }}" ]; then
            echo "❌ MONGODB_URI secret is missing"
            exit 1
          fi
          
          if [ -z "${{ secrets.RENDER_API_KEY }}" ]; then
            echo "❌ RENDER_API_KEY secret is missing"
            exit 1
          fi
          
          # Vercel secrets
          if [ -z "${{ secrets.VERCEL_TOKEN }}" ]; then
            echo "❌ VERCEL_TOKEN secret is missing"
            exit 1
          fi
          
          if [ -z "${{ secrets.VITE_API_BASE_URL }}" ]; then
            echo "❌ VITE_API_BASE_URL secret is missing"
            exit 1
          fi
          
          echo "✅ All required secrets are configured"

      - name: 🧪 MongoDB Connection Test
        run: |
          echo "Testing MongoDB connection..."
          
          # Use Node.js to test MongoDB connection
          cat > test-mongo.js << 'EOF'
          const { MongoClient } = require('mongodb');
          
          async function testConnection() {
            const client = new MongoClient(process.env.MONGODB_URI);
            try {
              await client.connect();
              console.log('✅ MongoDB connection successful');
              await client.close();
            } catch (error) {
              console.error('❌ MongoDB connection failed:', error.message);
              process.exit(1);
            }
          }
          
          testConnection();
          EOF
          
          npm install mongodb
          node test-mongo.js
        env:
          MONGODB_URI: ${{ secrets.MONGODB_URI }}

  deploy-backend:
    name: 🔧 Deploy Backend
    runs-on: ubuntu-latest
    needs: pre-deployment-checks
    if: |
      (github.event_name == 'workflow_dispatch' && inputs.deploy_backend) ||
      (github.event_name == 'push' && needs.pre-deployment-checks.outputs.backend-changed == 'true')
    
    environment:
      name: production
      url: https://matc-backend.onrender.com
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🚀 Trigger Backend Deployment
        run: |
          echo "Deploying backend to Render..."
          
          response=$(curl -s -X POST \
            -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
            -H "Content-Type: application/json" \
            "https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}/deploys" \
            -d '{"clearCache": true}')
          
          deploy_id=$(echo $response | jq -r '.id')
          echo "Deploy ID: $deploy_id"
          echo "DEPLOY_ID=$deploy_id" >> $GITHUB_ENV

      - name: ⏳ Monitor Backend Deployment
        run: |
          echo "Monitoring backend deployment..."
          
          for i in {1..20}; do
            echo "Checking deployment status (attempt $i/20)..."
            
            response=$(curl -s -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
              "https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}")
            
            status=$(echo $response | jq -r '.status')
            
            case $status in
              "live")
                echo "✅ Backend deployment successful!"
                exit 0
                ;;
              "build_failed"|"deploy_failed")
                echo "❌ Backend deployment failed with status: $status"
                exit 1
                ;;
              *)
                echo "⏳ Deployment in progress (status: $status)..."
                sleep 30
                ;;
            esac
          done
          
          echo "❌ Backend deployment timeout"
          exit 1

      - name: 🧪 Backend Health Check
        run: |
          echo "Performing backend health check..."
          sleep 30
          
          for i in {1..10}; do
            if curl -f -s "https://matc-backend.onrender.com/api/health"; then
              echo "✅ Backend health check passed!"
              break
            else
              echo "⏳ Health check failed, retrying in 15 seconds..."
              sleep 15
            fi
            
            if [ $i -eq 10 ]; then
              echo "❌ Backend health check failed"
              exit 1
            fi
          done

  deploy-frontend:
    name: 🌐 Deploy Frontend
    runs-on: ubuntu-latest
    needs: [pre-deployment-checks, deploy-backend]
    if: |
      always() &&
      (needs.deploy-backend.result == 'success' || needs.deploy-backend.result == 'skipped') &&
      ((github.event_name == 'workflow_dispatch' && inputs.deploy_frontend) ||
       (github.event_name == 'push' && needs.pre-deployment-checks.outputs.frontend-changed == 'true'))
    
    environment:
      name: production
      url: https://matrainingconsulting.vercel.app
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci

      - name: 🏗️ Build Frontend
        run: npm run build
        env:
          VITE_API_BASE_URL: ${{ secrets.VITE_API_BASE_URL }}
          VITE_APP_NAME: ${{ secrets.VITE_APP_NAME }}
          NODE_ENV: production

      - name: 🚀 Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'

      - name: 🧪 Frontend Health Check
        run: |
          sleep 45
          
          for i in {1..5}; do
            response=$(curl -s -o /dev/null -w "%{http_code}" "https://matrainingconsulting.vercel.app")
            
            if [ "$response" = "200" ]; then
              echo "✅ Frontend health check passed!"
              break
            else
              echo "⏳ Frontend not ready, retrying..."
              sleep 15
            fi
            
            if [ $i -eq 5 ]; then
              echo "❌ Frontend health check failed"
              exit 1
            fi
          done

  deploy-admin:
    name: 🔧 Deploy Admin Panel
    runs-on: ubuntu-latest
    needs: [pre-deployment-checks, deploy-backend]
    if: |
      always() &&
      (needs.deploy-backend.result == 'success' || needs.deploy-backend.result == 'skipped') &&
      ((github.event_name == 'workflow_dispatch' && inputs.deploy_admin) ||
       (github.event_name == 'push' && needs.pre-deployment-checks.outputs.admin-changed == 'true'))
    
    environment:
      name: production
      url: https://admine-lake-ten.vercel.app
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'admin-panel/package-lock.json'

      - name: 📦 Install Dependencies
        run: |
          cd admin-panel
          npm ci

      - name: 🏗️ Build Admin Panel
        run: |
          cd admin-panel
          npm run build
        env:
          VITE_API_BASE_URL: ${{ secrets.VITE_API_BASE_URL }}
          VITE_APP_NAME: MATC-ADMIN-PANEL
          NODE_ENV: production

      - name: 🚀 Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_ADMIN_PROJECT_ID }}
          vercel-args: '--prod'
          working-directory: ./admin-panel

      - name: 🧪 Admin Panel Health Check
        run: |
          sleep 45
          
          for i in {1..5}; do
            response=$(curl -s -o /dev/null -w "%{http_code}" "https://admine-lake-ten.vercel.app")
            
            if [ "$response" = "200" ]; then
              echo "✅ Admin panel health check passed!"
              break
            else
              echo "⏳ Admin panel not ready, retrying..."
              sleep 15
            fi
            
            if [ $i -eq 5 ]; then
              echo "❌ Admin panel health check failed"
              exit 1
            fi
          done

  post-deployment-validation:
    name: 🧪 Post-Deployment Validation
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend, deploy-admin]
    if: always()
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: 🧪 Comprehensive System Test
        run: |
          echo "Running comprehensive system validation..."
          
          # Test all endpoints
          endpoints=(
            "https://matc-backend.onrender.com/api/health"
            "https://matc-backend.onrender.com/api/programs"
            "https://matc-backend.onrender.com/api/categories"
            "https://matc-backend.onrender.com/api/partners"
          )
          
          for endpoint in "${endpoints[@]}"; do
            echo "Testing: $endpoint"
            
            if curl -f -s "$endpoint" > /dev/null; then
              echo "✅ $endpoint - OK"
            else
              echo "❌ $endpoint - Failed"
              exit 1
            fi
          done

      - name: 🧪 CORS Validation
        run: |
          echo "Testing CORS configuration..."
          
          origins=(
            "https://matrainingconsulting.vercel.app"
            "https://admine-lake-ten.vercel.app"
          )
          
          for origin in "${origins[@]}"; do
            echo "Testing CORS for: $origin"
            
            response=$(curl -s -o /dev/null -w "%{http_code}" \
              -H "Origin: $origin" \
              -H "Access-Control-Request-Method: GET" \
              -X OPTIONS \
              "https://matc-backend.onrender.com/api/health")
            
            if [ "$response" = "200" ] || [ "$response" = "204" ]; then
              echo "✅ CORS OK for $origin"
            else
              echo "❌ CORS failed for $origin (HTTP $response)"
              exit 1
            fi
          done

      - name: 📊 Generate Deployment Report
        run: |
          cat > matc_deployment_report.json << EOF
          {
            "deployment": {
              "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
              "status": "success",
              "environment": "production"
            },
            "services": {
              "backend": {
                "url": "https://matc-backend.onrender.com",
                "status": "${{ needs.deploy-backend.result }}",
                "health_check": "passed"
              },
              "frontend": {
                "url": "https://matrainingconsulting.vercel.app",
                "status": "${{ needs.deploy-frontend.result }}",
                "health_check": "passed"
              },
              "admin_panel": {
                "url": "https://admine-lake-ten.vercel.app",
                "status": "${{ needs.deploy-admin.result }}",
                "health_check": "passed"
              }
            },
            "database": {
              "provider": "MongoDB Atlas",
              "status": "connected"
            },
            "validation": {
              "api_endpoints": "passed",
              "cors_configuration": "passed",
              "full_stack_integration": "passed"
            }
          }
          EOF
          
          echo "📊 Deployment Report Generated"
          cat matc_deployment_report.json

      - name: 📊 Final Summary
        run: |
          echo "## 🎉 MATC Full-Stack Deployment Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Deployment Status" >> $GITHUB_STEP_SUMMARY
          echo "- **Backend**: ${{ needs.deploy-backend.result == 'success' && '✅' || '❌' }} ${{ needs.deploy-backend.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Frontend**: ${{ needs.deploy-frontend.result == 'success' && '✅' || '❌' }} ${{ needs.deploy-frontend.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Admin Panel**: ${{ needs.deploy-admin.result == 'success' && '✅' || '❌' }} ${{ needs.deploy-admin.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Live URLs" >> $GITHUB_STEP_SUMMARY
          echo "- **Backend API**: https://matc-backend.onrender.com/api" >> $GITHUB_STEP_SUMMARY
          echo "- **Frontend**: https://matrainingconsulting.vercel.app" >> $GITHUB_STEP_SUMMARY
          echo "- **Admin Panel**: https://admine-lake-ten.vercel.app" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ Validation Results" >> $GITHUB_STEP_SUMMARY
          echo "- **API Health**: ✅ All endpoints responding" >> $GITHUB_STEP_SUMMARY
          echo "- **CORS Configuration**: ✅ Properly configured" >> $GITHUB_STEP_SUMMARY
          echo "- **Database Connection**: ✅ MongoDB Atlas connected" >> $GITHUB_STEP_SUMMARY
          echo "- **Full-Stack Integration**: ✅ All services communicating" >> $GITHUB_STEP_SUMMARY
